<?php

// $Id: deck.module,v 1.11 2010/12/04 21:10:09 xen Exp $

/**
 * Implementation of hook_menu().
 */
function deck_menu() {
  $items['admin/content/node-type/%/deck_update'] = array(
    'title' => 'Update teasers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('deck_update_teasers_confirm', 3),
    'access arguments' => array('administer content types'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function deck_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form') {
    $options = array(
      '' => t('Drupal default behaviour'),
    );

    $fields = content_fields(NULL, NULL);
    foreach ($fields as $field) {
      // Need the content_fields call to determine if the field exists
      // on this content type.
      if ($field['type'] == 'text' && !$field['multiple'] && content_fields($field['field_name'], $form['#node_type']->type)) {
        $options[$field['field_name']] = $field['widget']['label'] . ' (' . $field['field_name']. ')';
      }
    }

    if (sizeof($options) > 1) {
      $form['deck'] = array(
        '#type' => 'fieldset',
        '#title' => t('Teaser settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['deck']['deck'] = array(
        '#type' => 'select',
        '#title' => t('Teaser'),
        '#options' => $options,
        '#default_value' => variable_get('deck_'. $form['#node_type']->type, ''),
        '#description' => t('Use a CCK field for node teasers. If the field is empty, the teaser is auto-generated from node body'),
      );

      $form['deck']['deck_cleanup'] = array(
        '#type' => 'radios',
        '#title' => t('Body cleanup'),
        '#options' => array(
          0 => t('None'),
          1 => t('Strip HTML tags'),
          2 => t('Correct HTML tags'),
          3 => t('Escape HTML tags'),
        ),
        '#default_value' => variable_get('deck_cleanup_'. $form['#node_type']->type, 0),
        '#description' => t('Method to clean up teaser, if falling back to using body field. Keep in mind that the teaser is assumed to be using the same format as the node body.'),
      );

      $form['deck']['update'] = array(
        '#type' => 'submit',
        '#value' => t('Set teaser settings and update existing teasers'),
        '#submit' => array('deck_update_teasers_submit'),
      );
    }
  }
  // Shamelessly nicked from except.module.
  elseif (isset($form['type']) && $form['type']['#value'] .'_node_form' == $form_id && variable_get('deck_'. $form['type']['#value'], '')) {
    // Set the body again, node_body_field prepends teaser for the JS to split.
    $form['body_field']['body']['#default_value'] = $form['#node']->body;
    // Kill off the Drupal teaser.js.
    if (isset($form['body_field']['teaser_js'])) {
      unset($form['body_field']['teaser_js']);
      unset($form['body_field']['teaser_include']);

      if (!empty($form['body_field']['#after_build'])) {
        if ($id = array_search('node_teaser_js', $form['body_field']['#after_build'])) {
          unset($form['body_field']['#after_build'][$id]);
        }
        if ($id = array_search('node_teaser_include_verify', $form['body_field']['#after_build'])) {
          unset($form['body_field']['#after_build'][$id]);
        }
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function deck_nodeapi(&$node, $op, $a3, $a4) {
  if (!($field_name = variable_get('deck_' . $node->type, '')) || !($field = content_fields($field_name, $node->type))) {
    return;
  }

  switch ($op) {
    case 'submit':
      // Set the teaser to empty string, so node_submit wont generate it.
      if (!isset($node->teaser)) {
        $node->teaser = '';
      }
      break;
    case 'presave':
      // Set the teaser to the value of the field.
      if (isset($node->{$field_name}) &&
        isset($node->{$field_name}[0]) &&
        isset($node->{$field_name}[0]['value'])) {
        $teaser = trim($node->{$field_name}[0]['value']);
        if ($teaser) {
          $node->teaser = $teaser;
        }
        elseif (isset($node->body)) {
          $lenght = $field['max_length'] ? $field['max_length'] : variable_get('teaser_length', 600);
          $teaser = node_teaser($node->body, isset($node->format) ? $node->format : NULL, $lenght);
          switch (variable_get('deck_cleanup_' . $node->type, 0)) {
            case 1:
              $teaser = strip_tags($teaser);
              break;
            case 2:
              $teaser = _filter_htmlcorrector($teaser);
              break;
            case 3:
              $teaser = check_plain($teaser);
              break;
          }
          $node->teaser = $teaser;
        }
        // Else there's nothing we can do. Teaser was already set to '' by the submit hook.
      }
      break;
  }
}

/**
 * Submit function for the update button.
 *
 * Redirects to the update callback.
 */
function deck_update_teasers_submit($form, &$form_state) {
  $type_url_str = str_replace('_', '-', $form['#node_type']->type);
  // Save the new settings first.
  variable_set('deck_'. $form['#node_type']->type, $form_state['values']['deck']);
  variable_set('deck_cleanup_'. $form['#node_type']->type, $form_state['values']['deck_cleanup']);
  $form_state['redirect'] = 'admin/content/node-type/' . $type_url_str . '/deck_update';
}

/**
 * Confirm form.
 */
function deck_update_teasers_confirm($form_state, $type_url_str) {
  $type = node_get_types('type', str_replace('-', '_', $type_url_str));
  if (!$type) {
    drupal_not_found();
    return;
  }

  $form['node_type'] = array('#type' => 'value', '#value' => $type);
  $form['name'] = array('#type' => 'value', '#value' => $type->name);

  $message = t('Are you sure you want to update the teasers on all nodes of type %type?', array('%type' => $type->name));
  $caption = '<p>' . t('This might take a while.') . '</p>';

  $caption .= '<p>'. t('This action cannot be undone.') .'</p>';

  return confirm_form($form, $message, 'admin/content/node-type/' . $type_url_str, $caption, t('Update'));
}

/**
 * Confirm form submit function.
 *
 * Starts the batch processing.
 */
function deck_update_teasers_confirm_submit($form, &$form_state) {
  $type = $form_state['values']['node_type']->type;
  $batch = array(
    'title' => t('Updating node teasers'),
    'operations' => array(
      array('_deck_update_teasers_batch', array($type)),
    ),
    'finished' => '_deck_update_teasers_batch_finished',
  );
  batch_set($batch);
  // batch_process('admin/content/node-type/' . $type);
  batch_process('admin/content/node-type/' . $type);
}


/**
 * Batch function, processes 10 nodes at a time.
 */
function _deck_update_teasers_batch($type, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_result(db_query("SELECT COUNT(DISTINCT nid) FROM {node} WHERE type = '%s'", $type));
    $context['sandbox']['field'] = variable_get('deck_cleanup_'. $type, 0);
  }

  $limit = 10;
  $result = db_query_range("SELECT nid FROM {node} WHERE nid > %d AND type = '%s' ORDER BY nid ASC", $context['sandbox']['current_node'], $type, 0, $limit);
  while ($row = db_fetch_array($result)) {
    $node = node_load($row['nid'], NULL, TRUE);
    $context['results'][] = $node->nid .' : '. $node->title;
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $node->nid;
    $context['message'] = $node->title;
    // Normal teasers are only generated when it's not set
    unset($node->teaser);
    // Normal teasers are generated by node_submit.
    node_submit($node);
    deck_nodeapi($node, 'presave', NULL, NULL);
    // However, we're not bothering with a full node_save, but set the teaser
    // of the latest revision directly in node_revisions.
    db_query("UPDATE {node_revisions} SET teaser = '%s' WHERE vid = %d", $node->teaser, $node->vid);
  }
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch finished function, notifies user of result.
 */
function _deck_update_teasers_batch_finished($success, $results, $operations) {
  if ($success) {
    // Clear caches.
    cache_clear_all();
    $message = format_plural(count($results), 'One node teaser updated.', '@count node teasers updated.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}
