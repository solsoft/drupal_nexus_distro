<?php

/**
 * @file
 * Build modes module extends core node build modes.
 */

/**
 * Implementation of hook_menu().
 */
function buildmodes_menu() {
  $items = array();

  $items['admin/build/buildmodes'] = array(
    'title' => 'Build modes',
    'description' => 'List, edit, or add build modes to your nodes',
    'page callback' => 'buildmodes_overview',
    'access arguments' => array('administer buildmodes'),
    'file' => 'buildmodes.admin.inc',
  );
  $items['admin/build/buildmodes/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/build/buildmodes/add'] = array(
    'title' => 'Add build mode',
    'description' => 'Add a new build mode',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('buildmodes_form'),
    'access arguments' => array('administer buildmodes'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'buildmodes.admin.inc',
  );
  $items['admin/build/buildmodes/%buildmode/edit'] = array(
    'title' => 'Edit build mode',
    'description' => 'Edit a build mode',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('buildmodes_form', 3),
    'access arguments' => array('administer buildmodes'),
    'file' => 'buildmodes.admin.inc',
  );
  $items['admin/build/buildmodes/%buildmode/delete'] = array(
    'title' => 'Delete build mode',
    'description' => 'Delete a build mode',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('buildmodes_delete_confirm', 3),
    'access arguments' => array('administer buildmodes'),
    'file' => 'buildmodes.admin.inc',
  );
  $items['node/%node/buildmodes'] = array(
    'title' => 'Build modes',
    'page callback' => 'buildmodes_page_view',
    'page arguments' => array(1),
    'access arguments' => array('debug buildmodes'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'buildmodes.pages.inc',
  );
  $count = 0;
  foreach (buildmodes_list_modes(TRUE) as $mode => $value) {
    $items['node/%node/buildmodes/'. $mode] = array(
      'title' => $value['title'],
      'type' => $count === 0 ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
      'page callback' => 'buildmodes_page_view',
      'page arguments' => array(1, 3),
      'access arguments' => array('debug buildmodes'),
      'file' => 'buildmodes.pages.inc',
    );
    $count++;
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function buildmodes_perm() {
  return array('administer buildmodes', 'debug buildmodes');
}

/**
 * Implementation of hook_content_build_modes().
 * from content.module (CCK)
 */
function buildmodes_content_build_modes() {
  $buildmodes = array(
    'buildmodes' => array(
      'title' => t('Build modes'),
    ),
  );

  $buildmodes['buildmodes']['build modes'] = buildmodes_list_modes();

  return $buildmodes;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function buildmodes_field_formatter_info() {
  $modes = buildmodes_list_modes(TRUE);
  $info = array();
  foreach ($modes as $mode => $value) {
    $info['buildmodes_'. $mode] = array(
      'label' => $value['title'] .' build mode',
      'field types' => array('nodereference'),
      'multiple values' => CONTENT_HANDLE_CORE,
    );
  }
  return $info;
}

/**
 * Implementation of hook_theme().
 */
function buildmodes_theme($existing, $type, $theme, $path) {
  $modes = buildmodes_list_modes(TRUE);
  $info = array();
  foreach ($modes as $mode => $value) {
    $info['buildmodes_formatter_buildmodes_'. $mode] = array(
      'arguments' => array('element'),
      'function' => 'theme_buildmodes_formatter',
    );
  }
  return $info;
}

/**
 * Proxy theme function for nodereference field formatters using build modes.
 */
function theme_buildmodes_formatter($element) {
  static $recursion_queue = array();
  $output = '';
  if (!empty($element['#item']['safe']['nid'])) {
    $nid = $element['#item']['safe']['nid'];
    $node = $element['#node'];
    $field = content_fields($element['#field_name'], $element['#type_name']);
    // If no 'referencing node' is set, we are starting a new 'reference thread'
    if (!isset($node->referencing_node)) {
      $recursion_queue = array();
    }
    $recursion_queue[] = $node->nid;
    if (in_array($nid, $recursion_queue)) {
      // Prevent infinite recursion caused by reference cycles:
      // if the node has already been rendered earlier in this 'thread',
      // we fall back to 'default' (node title) formatter.
      return theme('nodereference_formatter_default', $element);
    }
    if ($referenced_node = node_load($nid)) {
      $referenced_node->build_mode = str_replace('buildmodes_', '', $element['#formatter']);
      $referenced_node->referencing_node = $node;
      $referenced_node->referencing_field = $field;
      $output = node_view($referenced_node);
    }
  }
  return $output;
}

/**
 * Returns the list of user defined build modes
 *
 * @param $all
 *   List all non-core build modes not just those defined by this module.
 * @return
 *   Array TODO
 */
function buildmodes_list_modes($all = FALSE) {
  $buildmodes = array();
  if ($all) {
    $buildmodes += content_build_modes();
    foreach (array(NODE_BUILD_NORMAL, 'full', 'teaser', NODE_BUILD_PREVIEW, NODE_BUILD_SEARCH_INDEX, NODE_BUILD_SEARCH_RESULT, NODE_BUILD_RSS, NODE_BUILD_PRINT) as $mode) {
      unset($buildmodes[$mode]);
    }
  }
  $buildmodes += variable_get('buildmodes_modes', array());
  // For convinience prupose we sort by alpha keys
  ksort($buildmodes);

  return $buildmodes;
}

/**
 * Loads a single buildmode based on a system name
 */
function buildmode_load($name) {
  $buildmodes = buildmodes_list_modes();
  if ($buildmodes[$name]) {
    $buildmodes[$name]['name'] = $name;
    return $buildmodes[$name];
  }
  else {
    return FALSE;
  }
}

/**
 * Preprocess function for template suggestions
 */
function buildmodes_preprocess_node(&$vars) {
  $modes = buildmodes_list_modes(TRUE);
  $node = $vars['node'];

  // NODE_BUILD_NORMAL is 0, but the array may contain strings, so in_array()
  // uses strict checking. see http://www.phpwtf.org/its-quite-logical
  if (in_array($node->build_mode, array_keys($modes), TRUE)) {

    // Create the build_mode variable.
    $mode = $node->build_mode;
    $vars['build_mode'] = $mode;

    // Suggest more template names.
    $vars['template_files'][] = 'node-'. $vars['type'] .'-'. $vars['build_mode'];
    $vars['template_files'][] = $mode;
    $vars['template_files'][] = $mode .'-'. $node->type;
  }
}

/**
 * Preprocess function for template suggestions
 */
function buildmodes_preprocess_content_field(&$vars) {
  $modes = buildmodes_list_modes(TRUE);
  $node = $vars['node'];
  $element = $vars['element'];

  if (in_array($node->build_mode, array_keys($modes), TRUE)) {

    $mode = $node->build_mode;

    // Suggest more template names.
    $vars['template_files'][] = 'content-field-'. $mode;
    $vars['template_files'][] = 'content-field-'. $mode .'-'. $node->type;
    $vars['template_files'][] = 'content-field-'. $element['#field_name'] .'-'. $mode;
    $vars['template_files'][] = 'content-field-'. $element['#field_name'] .'-'. $mode .'-'. $node->type;
  }
}

/**
 * Generate a display of the given node.
 *
 * @param $node
 *   A node array or node object.
 * @param $build_mode
 *   The build mode name.
 * @param $links
 *   Whether or not to display node links. Links are omitted for node previews.
 *
 * @return
 *   An HTML representation of the themed node.
 *
 * @see node_view()
 */
function buildmodes_node_view($node, $build_mode = NODE_BUILD_NORMAL, $links = TRUE) {
  $node = (object)$node;

  // Default arguments from node_view() are passed explicitly because some
  // hook implementations may not set them as defaults.
  $teaser = FALSE;
  $page = FALSE;

  $node->build_mode = $build_mode;

  $node = node_build_content($node, $teaser, $page);

  if ($links) {
    $node->links = module_invoke_all('link', 'node', $node, $teaser);
    drupal_alter('link', $node->links, $node);
  }

  // Teasers don't exist for build modes, but the teaser text might be useful.
  // TODO: Figure out how to safely offer teaser version of body.
  $content = drupal_render($node->content);
  $node->body = $content;
  unset($node->teaser);

  // Allow modules to modify the fully-built node.
  node_invoke_nodeapi($node, 'alter', $teaser, $page);

  return theme('node', $node, $teaser, $page);
}

/**
 * Implementation of hook_context_plugins().
 */
function buildmodes_context_plugins() {
  $plugins = array();

  $plugins['buildmodes_context_reaction_node_view'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'buildmodes') .'/plugins',
      'file' => 'buildmodes_context_reaction_node_view.inc',
      'class' => 'buildmodes_context_reaction_node_view',
      'parent' => 'context_reaction',
    ),
  );

  return $plugins;
}

/**
 * Implementation of hook_context_registry().
 */
function buildmodes_context_registry() {
  return array(
    'reactions' => array(
      'buildmodes_node_view' => array(
        'title' => t('Build mode'),
        'plugin' => 'buildmodes_context_reaction_node_view',
      ),
    ),
  );
}

/**
 * Implementation of hook_nodeapi().
 */
function buildmodes_nodeapi(&$node, $op, $teaser, $page) {
  if ($op == 'view' && module_exists('context') && ($plugin = context_get_plugin('reaction', 'buildmodes_node_view'))) {
    $plugin->execute($node);
  }
}
